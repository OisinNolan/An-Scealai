/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class CustomDateTimePickerComponent {
    /**
     * @param {?} element
     * @param {?} renderer
     */
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.onChange = (val) => { };
        this.onTouched = () => { };
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.value = val;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.onChange(this._value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.en = {
            firstDayOfWeek: 0,
            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            today: 'Today',
            clear: 'Clear'
        };
        this.tr = {
            firstDayOfWeek: 1
        };
        /** @type {?} */
        let today = new Date();
        /** @type {?} */
        let month = today.getMonth();
        /** @type {?} */
        let year = today.getFullYear();
        /** @type {?} */
        let prevMonth = month === 0 ? 11 : month - 1;
        /** @type {?} */
        let prevYear = prevMonth === 11 ? year - 1 : year;
        /** @type {?} */
        let nextMonth = month === 11 ? 0 : month + 1;
        /** @type {?} */
        let nextYear = nextMonth === 0 ? year + 1 : year;
        this.minDate = new Date();
        this.minDate.setMonth(prevMonth);
        this.minDate.setFullYear(prevYear);
        this.maxDate = new Date();
        this.maxDate.setMonth(nextMonth);
        this.maxDate.setFullYear(nextYear);
        /** @type {?} */
        let invalidDate = new Date();
        invalidDate.setDate(today.getDate() - 1);
        this.invalidDates = [today, invalidDate];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    change(value) {
        this.value = value;
        console.log(this.value);
    }
}
CustomDateTimePickerComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'custom-date-time-picker',
                template: "<p-calendar \n  [(ngModel)]=\"value\" \n  [showIcon]=\"showIcon\"\n\n  [monthNavigator]=\"monthNavigator\" \n  [yearNavigator]=\"yearNavigator\" \n  yearRange=\"{{yearRange}}\"\n\n  [showTime]=\"showTime\"\n\n  [timeOnly]=\"timeOnly\"\n\n  dateFormat=\"{{dateFormat}}\"\n\n  (onSelect)=\"change(value)\"\n  >\n</p-calendar>",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => CustomDateTimePickerComponent),
                        multi: true
                    }
                ],
                styles: [""]
            }] }
];
CustomDateTimePickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer }
];
CustomDateTimePickerComponent.propDecorators = {
    _value: [{ type: Input }],
    showIcon: [{ type: Input }],
    monthNavigator: [{ type: Input }],
    yearNavigator: [{ type: Input }],
    yearRange: [{ type: Input }],
    showTime: [{ type: Input }],
    timeOnly: [{ type: Input }],
    dateFormat: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CustomDateTimePickerComponent.prototype._value;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.showIcon;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.monthNavigator;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.yearNavigator;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.yearRange;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.showTime;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.timeOnly;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.dateFormat;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.dates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.rangeDates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.minDate;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.maxDate;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.en;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.tr;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.invalidDates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.disabled;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.onChange;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.onTouched;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.element;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,