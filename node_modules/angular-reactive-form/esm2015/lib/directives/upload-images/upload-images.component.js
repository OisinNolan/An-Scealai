/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as _ from 'lodash';
import { FileService } from './test';
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class UploadImagesComponent {
    /**
     * @param {?} api
     * @param {?} element
     * @param {?} renderer
     */
    constructor(api, element, renderer) {
        this.api = api;
        this.element = element;
        this.renderer = renderer;
        this.inProgress = {
            process: false,
            error: false
        };
        this.number_file_upload_success = 0;
        this.onChange = (val) => { };
        this.onTouched = () => { };
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.value = val;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.onChange(this._value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        let $this = this;
        if (!_.isUndefined(this.accept)) {
            this.valid_extensions = this.accept.split('|');
        }
        $('#uploadfile-reactive-form').click(() => {
            if (this.inProgress[this.subProgress] !== true) {
                // tslint:disable-next-line:prefer-const
                /** @type {?} */
                let input = document.createElement('input');
                input.type = 'file';
                if (!_.isNil(this.multiple) && this.multiple === 'true') {
                    input.multiple = true;
                }
                $(input).trigger('click');
                $(input).on('change', event => {
                    this.number_file_upload_success = 0;
                    this.files = input.files;
                    if (this.files.length > 1) {
                        this.response_data = [];
                        _.forEach(this.files, function (file) {
                            $this.validateFile(file);
                        });
                    }
                    if (this.files.length === 1) {
                        this.validateFile(this.files[0]);
                    }
                });
            }
        });
    }
    /**
     * @param {?} file
     * @return {?}
     */
    getFileExtension(file) {
        return file.name.split('.').pop();
    }
    /**
     * @param {?} file
     * @return {?}
     */
    validateFile(file) {
        if (file !== undefined) {
            if (!_.isNil(this.allowMaxSize) && this.allowMaxSize !== '') {
                if (file.size > parseFloat(this.allowMaxSize) * 1024 * 1024) {
                    // this.notification.show('warning', `Please select file less than ${this.allowMaxSize}MB`, 5000);
                    console.log('Please select file less than');
                    return false;
                }
            }
            // tslint:disable-next-line:max-line-length
            if (!_.isUndefined(this.accept) && _.isUndefined(_.find(this.valid_extensions, item => item.toLowerCase() === this.getFileExtension(file).toLowerCase()))) {
                // this.notification.show('warning', `Please select a file with valid type`, 5000);
                console.log('Please select a file with valid type');
                return false;
            }
            this.upload(file);
        }
    }
    /**
     * @param {?} file
     * @return {?}
     */
    upload(file) {
        /** @type {?} */
        const $this = this;
        this.inProgress[this.subProgress] = true;
        this.inProgress[this.subError] = false;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        let params = {
            files: file
        };
        this.api.upload(params, this.apiUpload, this.headers).subscribe(response => {
            this.inProgress[this.subProgress] = false;
            this.number_file_upload_success++;
            if (!_.isNil(this.multiple) && this.multiple === 'true') {
                this.value.push(this.resultTransformer(response));
            }
            else {
                this.value = this.resultTransformer(response);
            }
            console.log('value', this.value);
        }, error => {
            this.inProgress[this.subProgress] = false;
            this.inProgress[this.subError] = true;
            console.log('error', error);
        });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    deleteItem(item) {
        this.value.splice(this.value.indexOf(item), 1);
        console.log('value', this.value);
    }
}
UploadImagesComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'upload-images',
                template: "<div class=\"row\">\n  <div class=\"signle-img\" *ngIf=\"!multiple\">\n    <img [src]=\"value\" width=\"100\" height=\"100\" alt=\"\">\n  </div>\n  <div class=\"mutil-img\" *ngIf=\"multiple === 'true'\">\n    <div class=\"group-item\" *ngFor=\"let item of value\">\n      <img class=\"singleImg\" width=\"100\" height=\"100\" [src]=\"item\" alt=\"\">\n      <span (click)=\"deleteItem(item)\">Remove</span>\n    </div>\n  </div>\n  <img class=\"add-icon\" id=\"uploadfile-reactive-form\" width=\"100\" height=\"100\" src=\"https://mbtskoudsalg.com/images/how-to-add-a-png-to-a-photo.png\" alt=\"\">\n</div>\n",
                providers: [
                    FileService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => UploadImagesComponent),
                        multi: true
                    }
                ],
                styles: [".row{margin-top:15px}.mutil-img .group-item .singleImg,.signle-img{border:1px solid grey;padding:3px}.mutil-img,.signle-img{margin-bottom:30px;display:inline-block}.mutil-img .group-item{display:inline-block;position:relative;margin-right:5px}.mutil-img .group-item span{position:absolute;left:50%;bottom:-15px;margin-left:-25px;cursor:pointer}.mutil-img .group-item span:hover{text-decoration:underline;color:grey}.add-icon{margin-left:30px;cursor:pointer}"]
            }] }
];
UploadImagesComponent.ctorParameters = () => [
    { type: FileService },
    { type: ElementRef },
    { type: Renderer }
];
UploadImagesComponent.propDecorators = {
    headers: [{ type: Input }],
    apiUpload: [{ type: Input }],
    accept: [{ type: Input }],
    subProgress: [{ type: Input }],
    subError: [{ type: Input }],
    allowMaxSize: [{ type: Input }],
    uploadPath: [{ type: Input }],
    multiple: [{ type: Input }],
    _value: [{ type: Input }],
    resultTransformer: [{ type: Input }],
    paramName: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    UploadImagesComponent.prototype.headers;
    /** @type {?} */
    UploadImagesComponent.prototype.apiUpload;
    /** @type {?} */
    UploadImagesComponent.prototype.accept;
    /** @type {?} */
    UploadImagesComponent.prototype.inProgress;
    /** @type {?} */
    UploadImagesComponent.prototype.subProgress;
    /** @type {?} */
    UploadImagesComponent.prototype.subError;
    /** @type {?} */
    UploadImagesComponent.prototype.allowMaxSize;
    /** @type {?} */
    UploadImagesComponent.prototype.uploadPath;
    /** @type {?} */
    UploadImagesComponent.prototype.multiple;
    /** @type {?} */
    UploadImagesComponent.prototype._value;
    /** @type {?} */
    UploadImagesComponent.prototype.resultTransformer;
    /** @type {?} */
    UploadImagesComponent.prototype.paramName;
    /** @type {?} */
    UploadImagesComponent.prototype.files;
    /** @type {?} */
    UploadImagesComponent.prototype.number_file_upload_success;
    /** @type {?} */
    UploadImagesComponent.prototype.response_data;
    /** @type {?} */
    UploadImagesComponent.prototype.valid_extensions;
    /** @type {?} */
    UploadImagesComponent.prototype.disabled;
    /** @type {?} */
    UploadImagesComponent.prototype.onChange;
    /** @type {?} */
    UploadImagesComponent.prototype.onTouched;
    /** @type {?} */
    UploadImagesComponent.prototype.api;
    /** @type {?} */
    UploadImagesComponent.prototype.element;
    /** @type {?} */
    UploadImagesComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,