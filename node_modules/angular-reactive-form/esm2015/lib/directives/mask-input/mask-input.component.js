/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class MaskInputComponent {
    /**
     * @param {?} element
     * @param {?} renderer
     */
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.myModel = '';
        this.onChange = (val) => { };
        this.onTouched = () => { };
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.value = val;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.onChange(this._value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log(this.guide);
    }
    /**
     * @return {?}
     */
    change() {
        if (this.valueWithCharacter === true) {
            this.value = this.myModel;
        }
        else {
            this.value = this.myModel.replace(/\D+/g, '');
        }
        console.log(this.value);
    }
}
MaskInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'mask-input',
                template: "<input class=\"form-control\" placeholder=\"{{placeholder}}\" [textMask]=\"{mask: inputMaskText, guide: guide}\" (change)=\"change()\" [(ngModel)]=\"myModel\" type=\"text\"/>",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MaskInputComponent),
                        multi: true
                    }
                ],
                styles: [""]
            }] }
];
MaskInputComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer }
];
MaskInputComponent.propDecorators = {
    inputMaskText: [{ type: Input }],
    guide: [{ type: Input }],
    _value: [{ type: Input }],
    valueWithCharacter: [{ type: Input }],
    placeholder: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MaskInputComponent.prototype.inputMaskText;
    /** @type {?} */
    MaskInputComponent.prototype.guide;
    /** @type {?} */
    MaskInputComponent.prototype._value;
    /** @type {?} */
    MaskInputComponent.prototype.valueWithCharacter;
    /** @type {?} */
    MaskInputComponent.prototype.placeholder;
    /** @type {?} */
    MaskInputComponent.prototype.myModel;
    /** @type {?} */
    MaskInputComponent.prototype.selected;
    /** @type {?} */
    MaskInputComponent.prototype.disabled;
    /** @type {?} */
    MaskInputComponent.prototype.onChange;
    /** @type {?} */
    MaskInputComponent.prototype.onTouched;
    /** @type {?} */
    MaskInputComponent.prototype.element;
    /** @type {?} */
    MaskInputComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXJlYWN0aXZlLWZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9tYXNrLWlucHV0L21hc2staW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFlekUsTUFBTTs7Ozs7SUFZSixZQUFvQixPQUFtQixFQUFVLFFBQWtCO1FBQS9DLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTDVELFlBQU8sR0FBRyxFQUFFLENBQUM7UUFNbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLEdBQVEsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEdBQVE7UUFDakIsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztTQUNsQjtJQUNILENBQUM7Ozs7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxJQUFJLEtBQUssQ0FBQyxHQUFHO1FBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFDRCxnQkFBZ0IsQ0FBQyxFQUFPO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsRUFBTztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLFVBQW1CO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7OztJQUNELE1BQU07UUFDSixJQUFJLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxJQUFJLEVBQUU7WUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFBO1NBQzFCO2FBQU07WUFDTCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztTQUMvQztRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7OztZQWxFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLDBMQUEwQztnQkFFMUMsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUM7d0JBQ2pELEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGOzthQUNGOzs7WUFmOEMsVUFBVTtZQUFFLFFBQVE7Ozs0QkFrQmhFLEtBQUs7b0JBQ0wsS0FBSztxQkFDTCxLQUFLO2lDQUNMLEtBQUs7MEJBQ0wsS0FBSzs7OztJQUpOLDJDQUF1Qjs7SUFDdkIsbUNBQXdCOztJQUN4QixvQ0FBd0I7O0lBQ3hCLGdEQUFxQzs7SUFDckMseUNBQTZCOztJQUM3QixxQ0FBb0I7O0lBQ3BCLHNDQUFnQjs7SUFDaEIsc0NBQTBCOztJQUMxQixzQ0FBMkI7O0lBQzNCLHVDQUE0Qjs7SUFDaEIscUNBQTJCOztJQUFFLHNDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgZm9yd2FyZFJlZiwgRWxlbWVudFJlZiwgUmVuZGVyZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWFzay1pbnB1dCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9tYXNrLWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbWFzay1pbnB1dC5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE1hc2tJbnB1dENvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBNYXNrSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIC8vIEBJbnB1dCgpIGlucHV0TWFza1RleHQ6IFtdO1xuICBASW5wdXQoKSBpbnB1dE1hc2tUZXh0O1xuICBASW5wdXQoKSBndWlkZTogYm9vbGVhbjtcbiAgQElucHV0KCkgX3ZhbHVlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHZhbHVlV2l0aENoYXJhY3RlcjogYm9vbGVhbjtcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgcHVibGljIG15TW9kZWwgPSAnJztcbiAgcHVibGljIHNlbGVjdGVkO1xuICBwcml2YXRlIGRpc2FibGVkOiBib29sZWFuO1xuICBwcml2YXRlIG9uQ2hhbmdlOiBGdW5jdGlvbjtcbiAgcHJpdmF0ZSBvblRvdWNoZWQ6IEZ1bmN0aW9uO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyKSB7XG4gICAgdGhpcy5vbkNoYW5nZSA9ICh2YWw6IGFueSkgPT4geyB9O1xuICAgIHRoaXMub25Ub3VjaGVkID0gKCkgPT4geyB9O1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWw7XG4gICAgdGhpcy5vbkNoYW5nZSh0aGlzLl92YWx1ZSk7XG4gIH1cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGNvbnNvbGUubG9nKHRoaXMuZ3VpZGUpO1xuICB9XG4gIGNoYW5nZSgpIHtcbiAgICBpZiAodGhpcy52YWx1ZVdpdGhDaGFyYWN0ZXIgPT09IHRydWUpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm15TW9kZWxcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubXlNb2RlbC5yZXBsYWNlKC9cXEQrL2csICcnKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2codGhpcy52YWx1ZSk7XG4gIH1cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGV4dC1tYXNrL3RleHQtbWFzay9ibG9iL21hc3Rlci9jb21wb25lbnREb2N1bWVudGF0aW9uLm1kI3JlYWRtZVxuXG5cbn1cbiJdfQ==