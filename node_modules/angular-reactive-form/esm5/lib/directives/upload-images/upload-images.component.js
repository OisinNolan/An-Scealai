/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as _ from 'lodash';
import { FileService } from './test';
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var UploadImagesComponent = /** @class */ (function () {
    function UploadImagesComponent(api, element, renderer) {
        this.api = api;
        this.element = element;
        this.renderer = renderer;
        this.inProgress = {
            process: false,
            error: false
        };
        this.number_file_upload_success = 0;
        this.onChange = function (val) { };
        this.onTouched = function () { };
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    UploadImagesComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this.value = val;
        }
    };
    Object.defineProperty(UploadImagesComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.onChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    UploadImagesComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    UploadImagesComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    UploadImagesComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    UploadImagesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var $this = this;
        if (!_.isUndefined(this.accept)) {
            this.valid_extensions = this.accept.split('|');
        }
        $('#uploadfile-reactive-form').click(function () {
            if (_this.inProgress[_this.subProgress] !== true) {
                // tslint:disable-next-line:prefer-const
                /** @type {?} */
                var input_1 = document.createElement('input');
                input_1.type = 'file';
                if (!_.isNil(_this.multiple) && _this.multiple === 'true') {
                    input_1.multiple = true;
                }
                $(input_1).trigger('click');
                $(input_1).on('change', function (event) {
                    _this.number_file_upload_success = 0;
                    _this.files = input_1.files;
                    if (_this.files.length > 1) {
                        _this.response_data = [];
                        _.forEach(_this.files, function (file) {
                            $this.validateFile(file);
                        });
                    }
                    if (_this.files.length === 1) {
                        _this.validateFile(_this.files[0]);
                    }
                });
            }
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    UploadImagesComponent.prototype.getFileExtension = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        return file.name.split('.').pop();
    };
    /**
     * @param {?} file
     * @return {?}
     */
    UploadImagesComponent.prototype.validateFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        if (file !== undefined) {
            if (!_.isNil(this.allowMaxSize) && this.allowMaxSize !== '') {
                if (file.size > parseFloat(this.allowMaxSize) * 1024 * 1024) {
                    // this.notification.show('warning', `Please select file less than ${this.allowMaxSize}MB`, 5000);
                    console.log('Please select file less than');
                    return false;
                }
            }
            // tslint:disable-next-line:max-line-length
            if (!_.isUndefined(this.accept) && _.isUndefined(_.find(this.valid_extensions, function (item) { return item.toLowerCase() === _this.getFileExtension(file).toLowerCase(); }))) {
                // this.notification.show('warning', `Please select a file with valid type`, 5000);
                console.log('Please select a file with valid type');
                return false;
            }
            this.upload(file);
        }
    };
    /**
     * @param {?} file
     * @return {?}
     */
    UploadImagesComponent.prototype.upload = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        /** @type {?} */
        var $this = this;
        this.inProgress[this.subProgress] = true;
        this.inProgress[this.subError] = false;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var params = {
            files: file
        };
        this.api.upload(params, this.apiUpload, this.headers).subscribe(function (response) {
            _this.inProgress[_this.subProgress] = false;
            _this.number_file_upload_success++;
            if (!_.isNil(_this.multiple) && _this.multiple === 'true') {
                _this.value.push(_this.resultTransformer(response));
            }
            else {
                _this.value = _this.resultTransformer(response);
            }
            console.log('value', _this.value);
        }, function (error) {
            _this.inProgress[_this.subProgress] = false;
            _this.inProgress[_this.subError] = true;
            console.log('error', error);
        });
    };
    /**
     * @param {?} item
     * @return {?}
     */
    UploadImagesComponent.prototype.deleteItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.value.splice(this.value.indexOf(item), 1);
        console.log('value', this.value);
    };
    UploadImagesComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'upload-images',
                    template: "<div class=\"row\">\n  <div class=\"signle-img\" *ngIf=\"!multiple\">\n    <img [src]=\"value\" width=\"100\" height=\"100\" alt=\"\">\n  </div>\n  <div class=\"mutil-img\" *ngIf=\"multiple === 'true'\">\n    <div class=\"group-item\" *ngFor=\"let item of value\">\n      <img class=\"singleImg\" width=\"100\" height=\"100\" [src]=\"item\" alt=\"\">\n      <span (click)=\"deleteItem(item)\">Remove</span>\n    </div>\n  </div>\n  <img class=\"add-icon\" id=\"uploadfile-reactive-form\" width=\"100\" height=\"100\" src=\"https://mbtskoudsalg.com/images/how-to-add-a-png-to-a-photo.png\" alt=\"\">\n</div>\n",
                    providers: [
                        FileService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return UploadImagesComponent; }),
                            multi: true
                        }
                    ],
                    styles: [".row{margin-top:15px}.mutil-img .group-item .singleImg,.signle-img{border:1px solid grey;padding:3px}.mutil-img,.signle-img{margin-bottom:30px;display:inline-block}.mutil-img .group-item{display:inline-block;position:relative;margin-right:5px}.mutil-img .group-item span{position:absolute;left:50%;bottom:-15px;margin-left:-25px;cursor:pointer}.mutil-img .group-item span:hover{text-decoration:underline;color:grey}.add-icon{margin-left:30px;cursor:pointer}"]
                }] }
    ];
    UploadImagesComponent.ctorParameters = function () { return [
        { type: FileService },
        { type: ElementRef },
        { type: Renderer }
    ]; };
    UploadImagesComponent.propDecorators = {
        headers: [{ type: Input }],
        apiUpload: [{ type: Input }],
        accept: [{ type: Input }],
        subProgress: [{ type: Input }],
        subError: [{ type: Input }],
        allowMaxSize: [{ type: Input }],
        uploadPath: [{ type: Input }],
        multiple: [{ type: Input }],
        _value: [{ type: Input }],
        resultTransformer: [{ type: Input }],
        paramName: [{ type: Input }]
    };
    return UploadImagesComponent;
}());
export { UploadImagesComponent };
if (false) {
    /** @type {?} */
    UploadImagesComponent.prototype.headers;
    /** @type {?} */
    UploadImagesComponent.prototype.apiUpload;
    /** @type {?} */
    UploadImagesComponent.prototype.accept;
    /** @type {?} */
    UploadImagesComponent.prototype.inProgress;
    /** @type {?} */
    UploadImagesComponent.prototype.subProgress;
    /** @type {?} */
    UploadImagesComponent.prototype.subError;
    /** @type {?} */
    UploadImagesComponent.prototype.allowMaxSize;
    /** @type {?} */
    UploadImagesComponent.prototype.uploadPath;
    /** @type {?} */
    UploadImagesComponent.prototype.multiple;
    /** @type {?} */
    UploadImagesComponent.prototype._value;
    /** @type {?} */
    UploadImagesComponent.prototype.resultTransformer;
    /** @type {?} */
    UploadImagesComponent.prototype.paramName;
    /** @type {?} */
    UploadImagesComponent.prototype.files;
    /** @type {?} */
    UploadImagesComponent.prototype.number_file_upload_success;
    /** @type {?} */
    UploadImagesComponent.prototype.response_data;
    /** @type {?} */
    UploadImagesComponent.prototype.valid_extensions;
    /** @type {?} */
    UploadImagesComponent.prototype.disabled;
    /** @type {?} */
    UploadImagesComponent.prototype.onChange;
    /** @type {?} */
    UploadImagesComponent.prototype.onTouched;
    /** @type {?} */
    UploadImagesComponent.prototype.api;
    /** @type {?} */
    UploadImagesComponent.prototype.element;
    /** @type {?} */
    UploadImagesComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,