/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as _ from 'lodash';
var CustomSelect2Component = /** @class */ (function () {
    function CustomSelect2Component(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.defaultValue = [];
        this.onChange = function (val) { };
        this.onTouched = function () { };
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    CustomSelect2Component.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this.value = val;
        }
    };
    Object.defineProperty(CustomSelect2Component.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.onChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    CustomSelect2Component.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CustomSelect2Component.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    CustomSelect2Component.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    CustomSelect2Component.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var $this = this;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var options = {};
        if (this.tags !== undefined && this.tags != null) {
            options.tags = this.tags;
        }
        if (this.placeholder !== undefined && this.placeholder != null) {
            options.placeholder = this.placeholder;
        }
        $('#select2-reactive-form').select2(options);
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var oldData = $('#select2-reactive-form').select2('data');
        if (oldData != null && oldData !== undefined && !_.isEmpty(oldData)) {
            _.forEach(oldData, function (value) {
                $this.defaultValue.push(value.id);
            });
            this.value = this.defaultValue;
        }
        // console.log('Af-value', this.value);
        $('#select2-reactive-form').change(function () {
            // tslint:disable-next-line:prefer-const
            /** @type {?} */
            var value = $(this).val();
            $this.value = value;
            // console.log('Ch-value', $this.value);
        });
    };
    CustomSelect2Component.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'app-custom-select2',
                    template: "<select id=\"select2-reactive-form\" class=\"form-control\" multiple select2>\n  <option *ngFor=\"let opt of options\" value=\"{{ opt.value }}\" selected=\"{{ opt.selected }}\">{{ opt.label }}</option>\n</select>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return CustomSelect2Component; }),
                            multi: true
                        }
                    ],
                    styles: [""]
                }] }
    ];
    CustomSelect2Component.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer }
    ]; };
    CustomSelect2Component.propDecorators = {
        tags: [{ type: Input }],
        placeholder: [{ type: Input }],
        options: [{ type: Input }],
        _value: [{ type: Input }]
    };
    return CustomSelect2Component;
}());
export { CustomSelect2Component };
if (false) {
    /** @type {?} */
    CustomSelect2Component.prototype.tags;
    /** @type {?} */
    CustomSelect2Component.prototype.placeholder;
    /** @type {?} */
    CustomSelect2Component.prototype.options;
    /** @type {?} */
    CustomSelect2Component.prototype._value;
    /** @type {?} */
    CustomSelect2Component.prototype.defaultValue;
    /** @type {?} */
    CustomSelect2Component.prototype.disabled;
    /** @type {?} */
    CustomSelect2Component.prototype.onChange;
    /** @type {?} */
    CustomSelect2Component.prototype.onTouched;
    /** @type {?} */
    CustomSelect2Component.prototype.element;
    /** @type {?} */
    CustomSelect2Component.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXNlbGVjdDIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1yZWFjdGl2ZS1mb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY3VzdG9tLXNlbGVjdDIvY3VzdG9tLXNlbGVjdDIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDMUcsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sS0FBSyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBRzVCO0lBNkJFLGdDQUFvQixPQUFtQixFQUFVLFFBQWtCO1FBQS9DLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTm5FLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBT2hCLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBQyxHQUFRLElBQU0sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsY0FBTyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFDRCwyQ0FBVTs7OztJQUFWLFVBQVcsR0FBUTtRQUNqQixJQUFJLEdBQUcsRUFBRTtZQUNQLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELHNCQUFJLHlDQUFLOzs7O1FBQVQ7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQzs7Ozs7UUFFRCxVQUFVLEdBQUc7WUFDWCxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QixDQUFDOzs7T0FMQTs7Ozs7SUFNRCxpREFBZ0I7Ozs7SUFBaEIsVUFBaUIsRUFBTztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUVELGtEQUFpQjs7OztJQUFqQixVQUFrQixFQUFPO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRUQsaURBQWdCOzs7O0lBQWhCLFVBQWlCLFVBQW1CO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxnREFBZTs7O0lBQWY7OztZQUVNLEtBQUssR0FBRyxJQUFJOzs7WUFHWixPQUFPLEdBQVEsRUFBRTtRQUNyQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2hELE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUMxQjtRQUNELElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLEVBQUU7WUFDOUQsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ3hDO1FBQ0QsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDOzs7WUFHekMsT0FBTyxHQUFHLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDekQsSUFBSSxPQUFPLElBQUksSUFBSSxJQUFJLE9BQU8sS0FBSyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ25FLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQVMsS0FBSztnQkFDL0IsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BDLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQ2hDO1FBQ0QsdUNBQXVDO1FBRXZDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQzs7O2dCQUU3QixLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRTtZQUN6QixLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNwQix3Q0FBd0M7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkExRkYsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixrT0FBOEM7b0JBRTlDLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSxzQkFBc0IsRUFBdEIsQ0FBc0IsQ0FBQzs0QkFDckQsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7O2lCQUNGOzs7Z0JBakI4QyxVQUFVO2dCQUFFLFFBQVE7Ozt1QkFtQmhFLEtBQUs7OEJBRUwsS0FBSzswQkFFTCxLQUFLO3lCQUVMLEtBQUs7O0lBdUVSLDZCQUFDO0NBQUEsQUEzRkQsSUEyRkM7U0E5RVksc0JBQXNCOzs7SUFDakMsc0NBQ2M7O0lBQ2QsNkNBQ29COztJQUNwQix5Q0FDYTs7SUFDYix3Q0FDYzs7SUFFZCw4Q0FBa0I7O0lBRWxCLDBDQUEwQjs7SUFDMUIsMENBQTJCOztJQUMzQiwyQ0FBNEI7O0lBRWhCLHlDQUEyQjs7SUFBRSwwQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIGZvcndhcmRSZWYsIEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5kZWNsYXJlIGNvbnN0ICQ6IGFueTtcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdhcHAtY3VzdG9tLXNlbGVjdDInLFxuICB0ZW1wbGF0ZVVybDogJy4vY3VzdG9tLXNlbGVjdDIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jdXN0b20tc2VsZWN0Mi5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEN1c3RvbVNlbGVjdDJDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQ3VzdG9tU2VsZWN0MkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgQElucHV0KClcbiAgdGFnczogQm9vbGVhbjtcbiAgQElucHV0KClcbiAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgQElucHV0KClcbiAgb3B0aW9uczogYW55O1xuICBASW5wdXQoKVxuICBfdmFsdWU6IGFueVtdO1xuXG4gIGRlZmF1bHRWYWx1ZSA9IFtdO1xuXG4gIHByaXZhdGUgZGlzYWJsZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgb25DaGFuZ2U6IEZ1bmN0aW9uO1xuICBwcml2YXRlIG9uVG91Y2hlZDogRnVuY3Rpb247XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcikge1xuICAgIHRoaXMub25DaGFuZ2UgPSAodmFsOiBhbnkpID0+IHt9O1xuICAgIHRoaXMub25Ub3VjaGVkID0gKCkgPT4ge307XG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG4gIHdyaXRlVmFsdWUodmFsOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWw7XG4gICAgdGhpcy5vbkNoYW5nZSh0aGlzLl92YWx1ZSk7XG4gIH1cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWNvbnN0XG4gICAgbGV0ICR0aGlzID0gdGhpcztcblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItY29uc3RcbiAgICBsZXQgb3B0aW9uczogYW55ID0ge307XG4gICAgaWYgKHRoaXMudGFncyAhPT0gdW5kZWZpbmVkICYmIHRoaXMudGFncyAhPSBudWxsKSB7XG4gICAgICBvcHRpb25zLnRhZ3MgPSB0aGlzLnRhZ3M7XG4gICAgfVxuICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyICE9PSB1bmRlZmluZWQgJiYgdGhpcy5wbGFjZWhvbGRlciAhPSBudWxsKSB7XG4gICAgICBvcHRpb25zLnBsYWNlaG9sZGVyID0gdGhpcy5wbGFjZWhvbGRlcjtcbiAgICB9XG4gICAgJCgnI3NlbGVjdDItcmVhY3RpdmUtZm9ybScpLnNlbGVjdDIob3B0aW9ucyk7XG5cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWNvbnN0XG4gICAgbGV0IG9sZERhdGEgPSAkKCcjc2VsZWN0Mi1yZWFjdGl2ZS1mb3JtJykuc2VsZWN0MignZGF0YScpO1xuICAgIGlmIChvbGREYXRhICE9IG51bGwgJiYgb2xkRGF0YSAhPT0gdW5kZWZpbmVkICYmICFfLmlzRW1wdHkob2xkRGF0YSkpIHtcbiAgICAgIF8uZm9yRWFjaChvbGREYXRhLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAkdGhpcy5kZWZhdWx0VmFsdWUucHVzaCh2YWx1ZS5pZCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coJ0FmLXZhbHVlJywgdGhpcy52YWx1ZSk7XG5cbiAgICAkKCcjc2VsZWN0Mi1yZWFjdGl2ZS1mb3JtJykuY2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnByZWZlci1jb25zdFxuICAgICAgbGV0IHZhbHVlID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICR0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBjb25zb2xlLmxvZygnQ2gtdmFsdWUnLCAkdGhpcy52YWx1ZSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==