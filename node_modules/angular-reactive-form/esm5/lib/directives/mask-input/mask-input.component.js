/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var MaskInputComponent = /** @class */ (function () {
    function MaskInputComponent(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.myModel = '';
        this.onChange = function (val) { };
        this.onTouched = function () { };
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    MaskInputComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this.value = val;
        }
    };
    Object.defineProperty(MaskInputComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.onChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    MaskInputComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MaskInputComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    MaskInputComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    MaskInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        console.log(this.guide);
    };
    /**
     * @return {?}
     */
    MaskInputComponent.prototype.change = /**
     * @return {?}
     */
    function () {
        if (this.valueWithCharacter === true) {
            this.value = this.myModel;
        }
        else {
            this.value = this.myModel.replace(/\D+/g, '');
        }
        console.log(this.value);
    };
    MaskInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mask-input',
                    template: "<input class=\"form-control\" placeholder=\"{{placeholder}}\" [textMask]=\"{mask: inputMaskText, guide: guide}\" (change)=\"change()\" [(ngModel)]=\"myModel\" type=\"text\"/>",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return MaskInputComponent; }),
                            multi: true
                        }
                    ],
                    styles: [""]
                }] }
    ];
    MaskInputComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer }
    ]; };
    MaskInputComponent.propDecorators = {
        inputMaskText: [{ type: Input }],
        guide: [{ type: Input }],
        _value: [{ type: Input }],
        valueWithCharacter: [{ type: Input }],
        placeholder: [{ type: Input }]
    };
    return MaskInputComponent;
}());
export { MaskInputComponent };
if (false) {
    /** @type {?} */
    MaskInputComponent.prototype.inputMaskText;
    /** @type {?} */
    MaskInputComponent.prototype.guide;
    /** @type {?} */
    MaskInputComponent.prototype._value;
    /** @type {?} */
    MaskInputComponent.prototype.valueWithCharacter;
    /** @type {?} */
    MaskInputComponent.prototype.placeholder;
    /** @type {?} */
    MaskInputComponent.prototype.myModel;
    /** @type {?} */
    MaskInputComponent.prototype.selected;
    /** @type {?} */
    MaskInputComponent.prototype.disabled;
    /** @type {?} */
    MaskInputComponent.prototype.onChange;
    /** @type {?} */
    MaskInputComponent.prototype.onTouched;
    /** @type {?} */
    MaskInputComponent.prototype.element;
    /** @type {?} */
    MaskInputComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXJlYWN0aXZlLWZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9tYXNrLWlucHV0L21hc2staW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHekU7SUF3QkUsNEJBQW9CLE9BQW1CLEVBQVUsUUFBa0I7UUFBL0MsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFMNUQsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQU1sQixJQUFJLENBQUMsUUFBUSxHQUFHLFVBQUMsR0FBUSxJQUFPLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLGNBQVEsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBRUQsdUNBQVU7Ozs7SUFBVixVQUFXLEdBQVE7UUFDakIsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFRCxzQkFBSSxxQ0FBSzs7OztRQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7Ozs7O1FBRUQsVUFBVSxHQUFHO1lBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0IsQ0FBQzs7O09BTEE7Ozs7O0lBTUQsNkNBQWdCOzs7O0lBQWhCLFVBQWlCLEVBQU87UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCw4Q0FBaUI7Ozs7SUFBakIsVUFBa0IsRUFBTztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7OztJQUVELDZDQUFnQjs7OztJQUFoQixVQUFpQixVQUFtQjtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQscUNBQVE7OztJQUFSO1FBQ0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7OztJQUNELG1DQUFNOzs7SUFBTjtRQUNFLElBQUksSUFBSSxDQUFDLGtCQUFrQixLQUFLLElBQUksRUFBRTtZQUNwQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUE7U0FDMUI7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7Z0JBbEVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsWUFBWTtvQkFDdEIsMExBQTBDO29CQUUxQyxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLENBQUM7NEJBQ2pELEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGOztpQkFDRjs7O2dCQWY4QyxVQUFVO2dCQUFFLFFBQVE7OztnQ0FrQmhFLEtBQUs7d0JBQ0wsS0FBSzt5QkFDTCxLQUFLO3FDQUNMLEtBQUs7OEJBQ0wsS0FBSzs7SUFxRFIseUJBQUM7Q0FBQSxBQXZFRCxJQXVFQztTQTNEWSxrQkFBa0I7OztJQUU3QiwyQ0FBdUI7O0lBQ3ZCLG1DQUF3Qjs7SUFDeEIsb0NBQXdCOztJQUN4QixnREFBcUM7O0lBQ3JDLHlDQUE2Qjs7SUFDN0IscUNBQW9COztJQUNwQixzQ0FBZ0I7O0lBQ2hCLHNDQUEwQjs7SUFDMUIsc0NBQTJCOztJQUMzQix1Q0FBNEI7O0lBQ2hCLHFDQUEyQjs7SUFBRSxzQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIGZvcndhcmRSZWYsIEVsZW1lbnRSZWYsIFJlbmRlcmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21hc2staW5wdXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWFzay1pbnB1dC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL21hc2staW5wdXQuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNYXNrSW5wdXRDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTWFza0lucHV0Q29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAvLyBASW5wdXQoKSBpbnB1dE1hc2tUZXh0OiBbXTtcbiAgQElucHV0KCkgaW5wdXRNYXNrVGV4dDtcbiAgQElucHV0KCkgZ3VpZGU6IGJvb2xlYW47XG4gIEBJbnB1dCgpIF92YWx1ZTogc3RyaW5nO1xuICBASW5wdXQoKSB2YWx1ZVdpdGhDaGFyYWN0ZXI6IGJvb2xlYW47XG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIHB1YmxpYyBteU1vZGVsID0gJyc7XG4gIHB1YmxpYyBzZWxlY3RlZDtcbiAgcHJpdmF0ZSBkaXNhYmxlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBvbkNoYW5nZTogRnVuY3Rpb247XG4gIHByaXZhdGUgb25Ub3VjaGVkOiBGdW5jdGlvbjtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcikge1xuICAgIHRoaXMub25DaGFuZ2UgPSAodmFsOiBhbnkpID0+IHsgfTtcbiAgICB0aGlzLm9uVG91Y2hlZCA9ICgpID0+IHsgfTtcbiAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbDogYW55KTogdm9pZCB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbCkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsO1xuICAgIHRoaXMub25DaGFuZ2UodGhpcy5fdmFsdWUpO1xuICB9XG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zb2xlLmxvZyh0aGlzLmd1aWRlKTtcbiAgfVxuICBjaGFuZ2UoKSB7XG4gICAgaWYgKHRoaXMudmFsdWVXaXRoQ2hhcmFjdGVyID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5teU1vZGVsXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm15TW9kZWwucmVwbGFjZSgvXFxEKy9nLCAnJyk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RleHQtbWFzay90ZXh0LW1hc2svYmxvYi9tYXN0ZXIvY29tcG9uZW50RG9jdW1lbnRhdGlvbi5tZCNyZWFkbWVcblxuXG59XG4iXX0=