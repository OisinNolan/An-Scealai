/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var CustomDateTimePickerComponent = /** @class */ (function () {
    function CustomDateTimePickerComponent(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.onChange = function (val) { };
        this.onTouched = function () { };
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this.value = val;
        }
    };
    Object.defineProperty(CustomDateTimePickerComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.onChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.en = {
            firstDayOfWeek: 0,
            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            today: 'Today',
            clear: 'Clear'
        };
        this.tr = {
            firstDayOfWeek: 1
        };
        /** @type {?} */
        var today = new Date();
        /** @type {?} */
        var month = today.getMonth();
        /** @type {?} */
        var year = today.getFullYear();
        /** @type {?} */
        var prevMonth = month === 0 ? 11 : month - 1;
        /** @type {?} */
        var prevYear = prevMonth === 11 ? year - 1 : year;
        /** @type {?} */
        var nextMonth = month === 11 ? 0 : month + 1;
        /** @type {?} */
        var nextYear = nextMonth === 0 ? year + 1 : year;
        this.minDate = new Date();
        this.minDate.setMonth(prevMonth);
        this.minDate.setFullYear(prevYear);
        this.maxDate = new Date();
        this.maxDate.setMonth(nextMonth);
        this.maxDate.setFullYear(nextYear);
        /** @type {?} */
        var invalidDate = new Date();
        invalidDate.setDate(today.getDate() - 1);
        this.invalidDates = [today, invalidDate];
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.change = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        console.log(this.value);
    };
    CustomDateTimePickerComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'custom-date-time-picker',
                    template: "<p-calendar \n  [(ngModel)]=\"value\" \n  [showIcon]=\"showIcon\"\n\n  [monthNavigator]=\"monthNavigator\" \n  [yearNavigator]=\"yearNavigator\" \n  yearRange=\"{{yearRange}}\"\n\n  [showTime]=\"showTime\"\n\n  [timeOnly]=\"timeOnly\"\n\n  dateFormat=\"{{dateFormat}}\"\n\n  (onSelect)=\"change(value)\"\n  >\n</p-calendar>",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return CustomDateTimePickerComponent; }),
                            multi: true
                        }
                    ],
                    styles: [""]
                }] }
    ];
    CustomDateTimePickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer }
    ]; };
    CustomDateTimePickerComponent.propDecorators = {
        _value: [{ type: Input }],
        showIcon: [{ type: Input }],
        monthNavigator: [{ type: Input }],
        yearNavigator: [{ type: Input }],
        yearRange: [{ type: Input }],
        showTime: [{ type: Input }],
        timeOnly: [{ type: Input }],
        dateFormat: [{ type: Input }]
    };
    return CustomDateTimePickerComponent;
}());
export { CustomDateTimePickerComponent };
if (false) {
    /** @type {?} */
    CustomDateTimePickerComponent.prototype._value;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.showIcon;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.monthNavigator;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.yearNavigator;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.yearRange;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.showTime;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.timeOnly;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.dateFormat;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.dates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.rangeDates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.minDate;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.maxDate;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.en;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.tr;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.invalidDates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.disabled;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.onChange;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.onTouched;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.element;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,