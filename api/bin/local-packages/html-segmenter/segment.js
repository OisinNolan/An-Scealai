//import { parse } from 'node-html-parser';
const parse = require('node-html-parser').parse;

class TreeTraverser {
    constructor(unescapableTagNames, unescapableTagClasses, segmentedText, selfClosingTags, type) {
        this.unescapableTagNames = unescapableTagNames
        this.unescapableTagClasses = unescapableTagClasses
        this.segmentedText = segmentedText
        this.selfClosingTags = selfClosingTags
        this.type = type
        this.parserId = 0
        this.textParser = null
        //if (this.segmentedText != []) {
        if (Array.isArray(this.segmentedText) && this.segmentedText.length!=0) {
            const tmp = this.segmentedText[this.parserId]

            //console.log(this.segmentedText)
            //console.log(this.segmentedText != [])
            //console.log(typeof(this.segmentedText))
            
            this.textParser = {
                text: tmp['text'],
                id: this.parserId,
                isFirstChar: true
            }

            if (this.type==='word') this.textParser['pos'] = tmp['pos']
        }
    }

    elementIsEscapable(elem) {

        if (this.unescapableTagNames.includes(elem.tagName))
            return false;
        
        for (let _class of elem.classList.value) {
            if (this.unescapableTagClasses.includes(_class))
                return false;
        }

        return true;
    }

    buildOpenElemTag(elem) {
        let tagString = `<${elem.tagName}`;
        
        /*if (elem.hasAttributes()) {
            for (let attr of elem.attributes) {
                tagString += ` ${attr.name}="${attr.value}"`
            }
        }*/ // equivalent using standard DOM Parser
        for (let attr in elem.attributes) {
            tagString += ` ${attr}="${elem.attributes[attr]}"`
        }
        if (this.selfClosingTags.includes(elem.tagName)) tagString += '/';
        tagString += '>';
        return tagString;
    }
}

function encapsulateSegment(node, traverser) {

    let newBodyContent = ""

    let nodeString = node.textContent;

    //console.log(node)
    //console.log(node.parentNode)
    //console.log(node.parentNode.tagName)

    let ancestorElement = node.parentNode;

    let elemClosingTag = '';
    let elemOpenTag = '';
    //console.log(node.tagName)
    //console.log(ancestorElement.tagName)
    while (traverser.elementIsEscapable(ancestorElement)) {

        elemClosingTag += `</${ancestorElement.tagName}>`;
        elemOpenTag += traverser.buildOpenElemTag(ancestorElement);

        ancestorElement = ancestorElement.parentNode

    }

    while (nodeString!=='' || (traverser.textParser !== null && traverser.textParser.text==='' && !traverser.textParser.isFirstChar)) {

        //console.log(traverser.textParser.text)
        
        if (traverser.textParser !== null) {
            
            if (traverser.textParser.text==="") {
                
                if (!traverser.textParser.isFirstChar) newBodyContent += elemClosingTag + '</SPAN>' + elemOpenTag

                if (traverser.parserId<traverser.segmentedText.length-1) {

                    traverser.parserId += 1;
                    const tmp = traverser.segmentedText[traverser.parserId]

                    const textParser = {
                        text: tmp['text'],
                        id: traverser.parserId,
                        isFirstChar: true
                    }
                    if (traverser.type==='word') textParser['pos'] = tmp['pos']

                    traverser.textParser = textParser

                } else {
                    traverser.textParser = null;
                }
            
            } else {

                if (traverser.textParser.text[0]===nodeString[0]) {

                    if (traverser.textParser.isFirstChar) {

                        const segmentId = `${traverser.type}${traverser.textParser.id}`

                        let openingSegmentTag = `<SPAN id="${segmentId}" class="${traverser.type}"`
                        if (traverser.type==="word") {
                            openingSegmentTag += ` lemma="${traverser.textParser['pos']['lemma']}"`
                            openingSegmentTag += ` tags="${traverser.textParser['pos']['tags']}"`
                        }
                        openingSegmentTag += '>'

                        newBodyContent += elemClosingTag + openingSegmentTag + elemOpenTag

                        traverser.textParser.isFirstChar = false

                    }

                    traverser.textParser.text = traverser.textParser.text.slice(1,traverser.textParser.text.length)//[1:]

                }

                // only move along the string when a break is not being placed
                newBodyContent += nodeString[0]
                nodeString = nodeString.slice(1,nodeString.length)
        
            }
        } else {
            newBodyContent += nodeString[0]
            nodeString = nodeString.slice(1,nodeString.length)
        }
    }
    
    return newBodyContent

}


function traverse(node, traverser) {

    if (node.nodeType === 3) {

        return encapsulateSegment(node, traverser)

    } else {

        let innerHTML = traverser.buildOpenElemTag(node)

        for (let childNode of node.childNodes) {

            innerHTML += traverse(childNode, traverser);

        }

        innerHTML += `</${node.tagName}>`

        return innerHTML
    }
}

/*export default function segmentBody(htmlString, sentences, words) {

    const root = parse(htmlString)

    let unescapableTagNames = ['P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'LI', 'TITLE', 'TH', 'TD', 'BODY']
    let unescapableTagClasses = []
    let selfClosingTags = ['IMG']

    const sentenceTraverser = new TreeTraverser(unescapableTagNames, unescapableTagClasses, sentences, selfClosingTags, 'sentence')
    const bodySentencesSegmented = parse(traverse(root, sentenceTraverser))

    unescapableTagClasses = ['sentence']

    const wordTraverser = new TreeTraverser(unescapableTagNames, unescapableTagClasses, words, selfClosingTags, 'word')
    const bodyWordsSegmented = parse(traverse(bodySentencesSegmented.querySelector('body'), wordTraverser))

    return bodyWordsSegmented

}*/

module.exports = function (htmlString, sentences, words) {

    const root = parse(htmlString)
    const body = root.querySelector('body')

    let unescapableTagNames = ['P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'LI', 'TITLE', 'TH', 'TD', 'BODY']
    let unescapableTagClasses = []
    let selfClosingTags = ['IMG']

    const sentenceTraverser = new TreeTraverser(unescapableTagNames, unescapableTagClasses, sentences, selfClosingTags, 'sentence')
    const bodySentencesSegmented = parse(traverse(body, sentenceTraverser))

    //console.log(bodySentencesSegmented.toString())

    unescapableTagClasses = ['sentence']

    const wordTraverser = new TreeTraverser(unescapableTagNames, unescapableTagClasses, words, selfClosingTags, 'word')
    const bodyWordsSegmented = parse(traverse(bodySentencesSegmented.querySelector('body'), wordTraverser))

    //console.log(bodyWordsSegmented.toString())

    return bodyWordsSegmented.toString()

};

/*const root = parse(`<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang xml:lang>
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>Untitled</title>
  <style>
html {
color: #1a1a1a;
background-color: #fdfdfd;
}
body {
margin: 0 auto;
max-width: 36em;
padding-left: 50px;
padding-right: 50px;
padding-top: 50px;
padding-bottom: 50px;
hyphens: auto;
overflow-wrap: break-word;
text-rendering: optimizeLegibility;
font-kerning: normal;
}
@media (max-width: 600px) {
body {
font-size: 0.9em;
padding: 12px;
}
h1 {
font-size: 1.8em;
}
}
@media print {
html {
background-color: white;
}
body {
background-color: transparent;
color: black;
font-size: 12pt;
}
p, h2, h3 {
orphans: 3;
widows: 3;
}
h2, h3, h4 {
page-break-after: avoid;
}
}
p {
margin: 1em 0;
}
a {
color: #1a1a1a;
}
a:visited {
color: #1a1a1a;
}
img {
max-width: 100%;
}
svg {
height: auto;
max-width: 100%;
}
h1, h2, h3, h4, h5, h6 {
margin-top: 1.4em;
}
h5, h6 {
font-size: 1em;
font-style: italic;
}
h6 {
font-weight: normal;
}
ol, ul {
padding-left: 1.7em;
margin-top: 1em;
}
li > ol, li > ul {
margin-top: 0;
}
blockquote {
margin: 1em 0 1em 1.7em;
padding-left: 1em;
border-left: 2px solid #e6e6e6;
color: #606060;
}
code {
font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
font-size: 85%;
margin: 0;
hyphens: manual;
}
pre {
margin: 1em 0;
overflow: auto;
}
pre code {
padding: 0;
overflow: visible;
overflow-wrap: normal;
}
.sourceCode {
background-color: transparent;
overflow: visible;
}
hr {
background-color: #1a1a1a;
border: none;
height: 1px;
margin: 1em 0;
}
table {
margin: 1em 0;
border-collapse: collapse;
width: 100%;
overflow-x: auto;
display: block;
font-variant-numeric: lining-nums tabular-nums;
}
table caption {
margin-bottom: 0.75em;
}
tbody {
margin-top: 0.5em;
border-top: 1px solid #1a1a1a;
border-bottom: 1px solid #1a1a1a;
}
th {
border-top: 1px solid #1a1a1a;
padding: 0.25em 0.5em 0.25em 0.5em;
}
td {
padding: 0.125em 0.5em 0.25em 0.5em;
}
header {
margin-bottom: 4em;
text-align: center;
}
#TOC li {
list-style: none;
}
#TOC ul {
padding-left: 1.3em;
}
#TOC > ul {
padding-left: 0;
}
#TOC a:not(:hover) {
text-decoration: none;
}
code{white-space: pre-wrap;}
span.smallcaps{font-variant: small-caps;}
div.columns{display: flex; gap: min(4vw, 1.5em);}
div.column{flex: auto; overflow-x: auto;}
div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}

ul.task-list[class]{list-style: none;}
ul.task-list li input[type="checkbox"] {
font-size: inherit;
width: 0.8em;
margin: 0 0.8em 0.2em -1.6em;
vertical-align: middle;
}
.display.math{display: block; text-align: center; margin: 0.5rem auto;}
</style>
</head>
<body>
<h1 id="brian-brÃ©agach"><strong>Brian BrÃ©agach</strong></h1>
<p>BhÃ­ fear ina chÃ³naÃ­ fadÃ³ i gCill Bhrighde. <em>Brian BrÃ©agach</em> an t-ainm a bhÃ­ air. BhÃ­ teach beag aige fÃ©in agus ag a bhean ag bÃ¡rr an chnuic. NÃ­ raibh de shlÃ­ beatha aige ach ag dÃ­ol poitÃ­n. BhÃ­ capall breÃ¡ glas aige agus bhÃ­odh sÃ­ aige ag dÃ­ol an phoitÃ­n.</p>
<p>Chuaigh sÃ© lÃ¡ amach, agus chonaic na gÃ¡rdaÃ­ Ã©, agus lean siad Ã© go dtÃ­ an teach. Nuair a bhÃ­ sÃ© in aice an tighe, d&#39;isligh sÃ© den chapall agus chaith sÃ© cÃºpla punt i n-aoileach an chapaill, agus dÃºirt sÃ© leis na gÃ¡rdaÃ­ go raibh an capall lÃ¡n d&#39;airgead. Thug na gÃ¡rdaÃ­ deich bpunt dÃ³ uirthi ag ceapadh go mbeadh siad saibhir go brÃ¡ch, ach pingin nÃ³ leith-phingin nÃ­ bhfuair siad.</p>
<p>Nuair a thÃ¡inig siad chuige le prÃ­osÃºnach a dhÃ©anamh dhe, bhÃ­ giorria aige, agus dÃºirt sÃ© go mba Ã© an teachtaire a b&#39;fhearr a bhÃ­ aige riamh, go mbÃ­odh sÃ© ag iompar airgid go dtÃ­ an siopa dhÃ³. ThÃ³ig na gÃ¡rdaÃ­ an giorria agus cheangail siad cupla punt faoi na mhuineÃ¡l, agus chuir chuig an siopa Ã© ach nÃ­or facthas arÃ­s Ã©.</p>
<p>BhÃ­ siad le Brian a chrochadh ansin, ach bhÃ­ plean eile aige. Nuair a chuala sÃ© an scÃ©al, mharaigh sÃ© coileach, agus cheangail sÃ© mÃ¡ilÃ­n faoi mhuineÃ¡l na mnÃ¡ agus lÃ­on sÃ© le fuil na coiligh Ã©. BhÃ­ a bhean le hais na tine nuair a bhuail na gÃ¡rdaÃ­ isteach. DÃºirt sÃ© go marÃ³dh sÃ© a bhean, agus go ndÃ©anfadh sÃ© beo arÃ­s Ã­. Fuair sÃ© scian agus gheÃ¡rr sÃ© an mÃ¡ilÃ­n, agus thit an bhean marbh. Thosaigh sÃ© ag feadail ansin agus d&#39;Ã©irigh an bhean suas. Chuaigh na gÃ¡rdaÃ­ abhaile, agus rinne siad an cleas cÃ©anna le na gcuid mnÃ¡ ach nÃ­or fhÃ©ad siad iad a dhÃ©anamh beÃ³ arÃ­s.</p>
<p>Cheap na GardaÃ­ Brian a bhÃ¡ faoin gcleas seo. Bhuail siad isteach ag Brian agus bhuail siad sÃ­os i mÃ¡la Ã© agus thugadar suas go Gaillimh Ã© lena bhÃ¡ sa bhfarraige. Nuair a bhÃ­ siad leath-bealaigh suas, chonaic siad giorria bacach. Lean siad Ã© agus an mÃ¡la a raibh Brian istigh ann, chaith siad uatha Ã©.</p>
<p>BhÃ­ fear ag dul chuig an margadh agus chonaic sÃ© Brian sa mÃ¡la. D&#39;fhiafhraigh sÃ© dÃ³ cÃ© raibh sÃ© ag dul. DÃºirt Brian go raibh sÃ© ag dul go na Flaithis. Chuaigh an fear eile isteach sa mÃ¡la agus dÃºirt sÃ© le Brian na beithigh a dhÃ­ol. ThÃ³g na gÃ¡rdaÃ­ an mÃ¡la arÃ­s agus nÃ­or stop siadgo ndeacha siad go dÃºg na Gaillimhe. Chaith siad an mÃ¡la amach sa bhfarraige, agus d&#39;imigh siad abhaile. BhÃ­ siad scaitheamh amach Ã³n mbaile mÃ³r nuair a casadh dÃ³ibh Brian agus na beithigh aige. Cheistigh siad Ã©, agus dÃºirt sÃ© go bhfuair sÃ© na beithigh amuigh sa bhfarraige agus go raibh go leor fÃ¡gtha fÃ³s ann. NÃ­or chreid siad an uair seo Ã© agus leig siad abhaile Ã©.</p>
<p>ScrÃ­ofa ag: MÃ¡irtÃ­n Ã Conroigh</p>
<p>Foinse eolas: MÃ¡irtÃ­n Ã Conroigh (aois 68), An CheathrÃº Caol</p>
</body>
</html>
`);

const body = root.querySelector('body')

// only for testing - would usually be done via another API call
const sents = []
const words = []
for (let chunk of body.childNodes) {
    for (let sentence of chunk.textContent.split('.')) {
        sents.push({text: sentence})
        for (let word of sentence.split(' ')) {
            words.push({text: word, pos: {lemma: 'something', tags: 'other' }})
        }
    }
}
//

const newBody = segmentBody(body, sents, words)

console.log(newBody.toString())*/